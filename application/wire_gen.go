// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"fmt"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/podossaem/podoroot/application/config"
	middleware2 "github.com/podossaem/podoroot/application/middleware"
	"github.com/podossaem/podoroot/application/router"
	"github.com/podossaem/podoroot/domain/auth"
	"github.com/podossaem/podoroot/domain/auth/app"
	"github.com/podossaem/podoroot/domain/user"
	app2 "github.com/podossaem/podoroot/domain/user/app"
	persist2 "github.com/podossaem/podoroot/domain/user/persist"
	"github.com/podossaem/podoroot/domain/verification"
	app3 "github.com/podossaem/podoroot/domain/verification/app"
	"github.com/podossaem/podoroot/domain/verification/persist"
	"github.com/podossaem/podoroot/infra/database"
	"github.com/podossaem/podoroot/infra/database/mymongo"
	"github.com/podossaem/podoroot/infra/database/myredis"
)

// Injectors from app.go:

func Start() error {
	client := mymongo.NewClient()
	myredisClient := myredis.NewClient()
	emailVerificationRepository := persist.NewEmailVerificationRepository(client)
	emailVerificationService := verification.NewEmailVerificationService(emailVerificationRepository)
	userRepository := persist2.NewUserRepository(client)
	userService := user.NewUserService(userRepository)
	authService := auth.NewAuthService(emailVerificationService, userService)
	authController := app.NewAuthController(authService)
	authRouter := app.NewAuthRouter(authController)
	userController := app2.NewUserController()
	userRouter := app2.NewUserRouter(userController)
	emailVerificationController := app3.NewEmailVerificationController(emailVerificationService)
	verificationRouter := app3.NewVerificationRouter(emailVerificationController)
	routerRouter := router.New(authRouter, userRouter, verificationRouter)
	error2 := StartApplication(client, myredisClient, routerRouter)
	return error2
}

// app.go:

func StartApplication(
	mymongoClient *mymongo.Client,
	myredisClient *myredis.Client, router2 router.Router,

) error {
	if err := database.Init(
		mymongoClient,
		myredisClient,
	); err != nil {
		return err
	}
	app4 := echo.New()
	app4.
		Use(middleware.Logger())
	app4.
		Use(middleware2.New())
	router2.
		Attach(app4)

	if err := app4.Start(fmt.Sprintf(":%d", config.AppPort())); err != nil {
		return err
	}

	defer func() {
		if err := database.Dispose(mymongoClient); err != nil {
			panic(err)
		}
	}()

	return nil
}
